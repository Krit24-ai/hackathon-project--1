/* -------------------------
   /* -------------------------
   Configuration & constants
 ------------------------- */

const API_KEY = "AIzaSyBhGnO2Rn3134IQjL12SVUBfFYdPGf5Vig";

const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${API_KEY}`;
const BG_FADE_INTERVAL = 9000;


/* -------------------------
  Background fade logic
------------------------- */
const bg1 = document.getElementById('bg1');
const bg2 = document.getElementById('bg2');
let bgToggle = true;
setInterval(() => {
    bgToggle = !bgToggle;
    bg1.classList.toggle('active', bgToggle);
    bg2.classList.toggle('active', !bgToggle);
}, BG_FADE_INTERVAL);

/* -------------------------
  Tab navigation
------------------------- */
function showTab(id, btn) {
    document.querySelectorAll('.tab').forEach(t => t.style.display = 'none');
    const el = document.getElementById(id);
    if (el) el.style.display = 'block';

    document.querySelectorAll('.sidebar button').forEach(b => b.classList.remove('active'));
    if (btn) btn.classList.add('active');
}

/* -------------------------
  Chatbot & LLM integration
------------------------- */
function toggleChat() {
    const w = document.getElementById('chatWindow');
    if (w.style.display === 'flex' || w.style.display === 'block') {
        w.style.display = 'none';
    } else {
        w.style.display = 'flex';
        w.style.flexDirection = 'column';
        document.getElementById('chatInput').focus();
    }
}

function appendMessage(text, who = 'bot') {
    const container = document.getElementById('chatMessages');
    const p = document.createElement('div');
    p.className = who === 'bot' ? 'bot-message' : 'user-message';
    p.innerHTML = text;
    container.appendChild(p);
    container.scrollTop = container.scrollHeight;
}

async function sendMessage() {
    const input = document.getElementById('chatInput');
    const text = input.value.trim();
    if (!text) return;
    appendMessage(`<b>You:</b> ${escapeHtml(text)}`, 'user');
    input.value = '';
    appendMessage('Bot is typing...', 'bot');

    if (!API_KEY) {
        setTimeout(() => {
            const msgs = document.querySelectorAll('#chatMessages .bot-message');
            msgs[msgs.length - 1].remove();
            appendMessage(`<b>Bot:</b> (demo) For "${escapeHtml(text)}" ‚Äî try: check soil pH, upload leaf image for detection, and avoid spraying before rain.`, 'bot');
        }, 900);
        return;
    }

    try {
        const res = await fetch('/api/generate', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ prompt: text })
        });
        const data = await res.json();
        const msgs = document.querySelectorAll('#chatMessages .bot-message');
        msgs[msgs.length - 1].remove();
        appendMessage(`<b>Bot:</b> ${escapeHtml(data.reply)}`, 'bot');
    } catch (e) {
        console.error(e);
        const msgs = document.querySelectorAll('#chatMessages .bot-message');
        if (msgs.length) msgs[msgs.length - 1].remove();
        appendMessage(`<b>Bot:</b> Error contacting AI. Showing demo reply: Check weather forecast & soil pH.`, 'bot');
    }
}

/* -------------------------
  Voice recognition (Chat + Queries)
------------------------- */
let recognition;

// init if supported
if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    recognition = new SpeechRecognition();
    recognition.lang = 'en-IN';
    recognition.interimResults = false;

    // generic handler (we‚Äôll set active target before start)
    let activeTarget = null;
    let submitFn = null;

    recognition.onresult = (e) => {
        const transcript = e.results[0][0].transcript;
        if (activeTarget) activeTarget.value = transcript;
        if (submitFn) submitFn();
    };
    recognition.onend = () => {
        if (activeTarget && activeTarget.id === "chatInput") {
            document.getElementById('startVoiceBtn').textContent = 'üéô';
        }
        if (activeTarget && activeTarget.id === "queryText") {
            document.getElementById('voiceBtn').textContent = 'üéô Start voice';
        }
    };

    // Chatbot mic
    const startVoiceBtn = document.getElementById('startVoiceBtn');
    startVoiceBtn.onclick = () => {
        try {
            activeTarget = document.getElementById('chatInput');
            submitFn = sendMessage;
            recognition.start();
            startVoiceBtn.textContent = '‚è∫';
        } catch (err) {
            console.warn(err);
        }
    };

    // Queries mic
    const voiceBtn = document.getElementById('voiceBtn');
    voiceBtn.onclick = () => {
        try {
            activeTarget = document.getElementById('queryText');
            submitFn = submitQuery;
            recognition.start();
            voiceBtn.textContent = '‚è∫ Listening...';
        } catch (err) {
            console.warn(err);
        }
    };

} else {
    // hide buttons if not supported
    document.getElementById('startVoiceBtn').style.display = 'none';
    document.getElementById('voiceBtn').style.display = 'none';
}


/* -------------------------
  Chat image upload
------------------------- */
function handleChatImage(ev) {
    const f = ev.target.files[0];
    if (!f) return;
    appendMessage(`<b>You sent an image:</b> ${escapeHtml(f.name)}`, 'user');
    appendMessage(`<b>Bot:</b> Processing image...`, 'bot');

    setTimeout(() => {
        const msgs = document.querySelectorAll('#chatMessages .bot-message');
        msgs[msgs.length - 1].remove();
        appendMessage(`<b>Bot:</b> (demo) Detected Early Blight. Recommendation: remove infected leaves, apply copper spray.`, 'bot');
    }, 1200);
}

/* -------------------------
  Fertilizer recommendation
------------------------- */
function recommendFertilizer() {
    const ph = parseFloat(document.getElementById('soilPH').value || '0');
    const npk = document.getElementById('soilNPK').value || '';
    const out = document.getElementById('fertResult');
    if (!ph || !npk) { out.innerText = 'Please enter pH and NPK values.'; return; }
    let rec = '';
    if (ph < 5.5) rec = 'Soil acidic: apply lime and organic compost; reduce urea.';
    else if (ph > 7.5) rec = 'Soil alkaline: consider elemental sulphur and zinc if deficient.';
    else rec = `pH OK: For NPK ${npk} ‚Äî apply split nitrogen dose and basal P & K.`;
    out.innerHTML = `<b>Recommendation:</b> ${rec}`;
}

/* -------------------------
  Util
------------------------- */
function escapeHtml(s) {
    return ('' + s).replace(/</g, '&lt;').replace(/>/g, '&gt;');
}

/* -------------------------
  Language Translations
------------------------- */
const translations = {
    en: {
        dashboard: "Dashboard",
        queries: "Queries",
        solutions: "Solutions",
        community: "Community",
        expert: "Expert Connect",
        profile: "Profile",
        settings: "Settings",
        chatbot: "AI Chatbot ‚Äî Voice & Image",
        hello: "Hello! How can I help with your farming today?",
        soil: "üåæ Soil Health & Fertilizer",
        govt: "üí∞ Govt Schemes & Subsidies",
        weather: "üå¶ Live Weather Advisory"
    },
    hi: {
        dashboard: "‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°",
        queries: "‡§™‡•ç‡§∞‡§∂‡•ç‡§®",
        solutions: "‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®",
        community: "‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø",
        expert: "‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡•á‡§Ç",
        profile: "‡§™‡•ç‡§∞‡•ã‡§´‡§º‡§æ‡§á‡§≤",
        settings: "‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏",
        chatbot: "‡§è‡§Ü‡§à ‡§ö‡•à‡§ü‡§¨‡•â‡§ü ‚Äî ‡§µ‡•â‡§Ø‡§∏ ‡§î‡§∞ ‡§á‡§Æ‡•á‡§ú",
        hello: "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§ñ‡•á‡§§‡•Ä ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å?",
        soil: "üåæ ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§∏‡•á‡§π‡§§ ‡§î‡§∞ ‡§ñ‡§æ‡§¶",
        govt: "üí∞ ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Å ‡§î‡§∞ ‡§∏‡§¨‡•ç‡§∏‡§ø‡§°‡•Ä",
        weather: "üå¶ ‡§≤‡§æ‡§á‡§µ ‡§Æ‡•å‡§∏‡§Æ ‡§∏‡§≤‡§æ‡§π"
    },
    ml: {
        dashboard: "‡¥°‡¥æ‡¥∑‡µç‚Äå‡¥¨‡µã‡µº‡¥°‡µç",
        queries: "‡¥ö‡µã‡¥¶‡µç‡¥Ø‡¥ô‡µç‡¥ô‡µæ",
        solutions: "‡¥™‡¥∞‡¥ø‡¥π‡¥æ‡¥∞‡¥ô‡µç‡¥ô‡µæ",
        community: "‡¥ï‡¥Æ‡µç‡¥Æ‡µç‡¥Ø‡µÇ‡¥£‡¥ø‡¥±‡µç‡¥±‡¥ø",
        expert: "‡¥µ‡¥ø‡¥¶‡¥ó‡µç‡¥ß ‡¥¨‡¥®‡µç‡¥ß‡¥Ç",
        profile: "‡¥™‡µç‡¥∞‡µä‡¥´‡µà‡µΩ",
        settings: "‡¥ï‡µç‡¥∞‡¥Æ‡µÄ‡¥ï‡¥∞‡¥£‡¥ô‡µç‡¥ô‡µæ",
        chatbot: "‡¥é‡¥ê ‡¥ö‡¥æ‡¥±‡µç‡¥±‡µç‚Äå‡¥¨‡µã‡¥ü‡µç‡¥ü‡µç ‚Äî ‡¥∂‡¥¨‡µç‡¥¶‡¥µ‡µÅ‡¥Ç ‡¥ö‡¥ø‡¥§‡µç‡¥∞‡¥µ‡µÅ‡¥Ç",
        hello: "‡¥®‡¥Æ‡¥∏‡µç‡¥ï‡¥æ‡¥∞‡¥Ç! ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥ï‡µÉ‡¥∑‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥é‡¥ô‡µç‡¥ô‡¥®‡µÜ ‡¥∏‡¥π‡¥æ‡¥Ø‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡¥Ç?",
        soil: "üåæ ‡¥Æ‡¥£‡µç‡¥£‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥Ü‡¥∞‡µã‡¥ó‡µç‡¥Ø‡¥Ç & ‡¥µ‡¥≥‡¥Ç",
        govt: "üí∞ ‡¥∏‡µº‡¥ï‡µç‡¥ï‡¥æ‡µº ‡¥™‡¥¶‡µç‡¥ß‡¥§‡¥ø‡¥ï‡µæ & ‡¥∏‡¥¨‡µç‡¥∏‡¥ø‡¥°‡¥ø",
        weather: "üå¶ ‡¥§‡¥§‡µç‡¥∏‡¥Æ‡¥Ø ‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥•‡¥æ ‡¥â‡¥™‡¥¶‡µá‡¥∂‡¥Ç"
    },
    ta: {
        dashboard: "‡Æü‡Ææ‡Æ∑‡Øç‡Æ™‡Øã‡Æ∞‡Øç‡Æü‡ØÅ",
        queries: "‡Æï‡Øá‡Æ≥‡Øç‡Æµ‡Æø‡Æï‡Æ≥‡Øç",
        solutions: "‡Æ§‡ØÄ‡Æ∞‡Øç‡Æµ‡ØÅ‡Æï‡Æ≥‡Øç",
        community: "‡Æö‡ÆÆ‡ØÇ‡Æï‡ÆÆ‡Øç",
        expert: "‡Æ®‡Æø‡Æ™‡ØÅ‡Æ£‡Æ∞‡Øç ‡Æ§‡Øä‡Æü‡Æ∞‡Øç‡Æ™‡ØÅ",
        profile: "‡Æö‡ØÅ‡ÆØ‡Æµ‡Æø‡Æµ‡Æ∞‡ÆÆ‡Øç",
        settings: "‡ÆÖ‡ÆÆ‡Øà‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç",
        chatbot: "‡Æè‡Æê ‡ÆÖ‡Æ∞‡Æü‡Øç‡Æü‡Øà ‚Äî ‡Æï‡ØÅ‡Æ∞‡Æ≤‡Øç & ‡Æ™‡Æü‡ÆÆ‡Øç",
        hello: "‡Æµ‡Æ£‡Æï‡Øç‡Æï‡ÆÆ‡Øç! ‡Æµ‡Æø‡Æµ‡Æö‡Ææ‡ÆØ‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç ‡Æé‡Æ™‡Øç‡Æ™‡Æü‡Æø ‡Æâ‡Æ§‡Æµ‡Æ≤‡Ææ‡ÆÆ‡Øç?",
        soil: "üåæ ‡ÆÆ‡Æ£‡Øç‡Æ£‡Æø‡Æ©‡Øç ‡ÆÜ‡Æ∞‡Øã‡Æï‡Øç‡Æï‡Æø‡ÆØ‡ÆÆ‡Øç & ‡Æâ‡Æ∞‡ÆÆ‡Øç",
        govt: "üí∞ ‡ÆÖ‡Æ∞‡Æö‡ØÅ ‡Æ§‡Æø‡Æü‡Øç‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øç & ‡ÆÆ‡Ææ‡Æ©‡Æø‡ÆØ‡Æô‡Øç‡Æï‡Æ≥‡Øç",
        weather: "üå¶ ‡Æ®‡Øá‡Æ∞‡Æü‡Æø ‡Æµ‡Ææ‡Æ©‡Æø‡Æ≤‡Øà ‡ÆÜ‡Æ≤‡Øã‡Æö‡Æ©‡Øà"
    },
    te: {
        dashboard: "‡∞°‡∞æ‡∞∑‡±ç‚Äå‡∞¨‡±ã‡∞∞‡±ç‡∞°‡±ç",
        queries: "‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®‡∞≤‡±Å",
        solutions: "‡∞™‡∞∞‡∞ø‡∞∑‡±ç‡∞ï‡∞æ‡∞∞‡∞æ‡∞≤‡±Å",
        community: "‡∞∏‡∞Æ‡∞æ‡∞ú‡∞Ç",
        expert: "‡∞®‡∞ø‡∞™‡±Å‡∞£‡±Å‡∞°‡±Å ‡∞ï‡∞®‡±Ü‡∞ï‡±ç‡∞ü‡±ç",
        profile: "‡∞™‡±ç‡∞∞‡±ä‡∞´‡±à‡∞≤‡±ç",
        settings: "‡∞∏‡±Ü‡∞ü‡±ç‡∞ü‡∞ø‡∞Ç‡∞ó‡±ç‡∞∏‡±ç",
        chatbot: "‡∞è‡∞ê ‡∞ö‡∞æ‡∞ü‡±ç‚Äå‡∞¨‡∞æ‡∞ü‡±ç ‚Äî ‡∞µ‡∞æ‡∞Ø‡∞ø‡∞∏‡±ç & ‡∞á‡∞Æ‡±á‡∞ú‡±ç",
        hello: "‡∞π‡∞≤‡±ã! ‡∞Æ‡±Ä ‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡∞æ‡∞Ø‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞é‡∞≤‡∞æ ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ö‡±á‡∞Ø‡∞ó‡∞≤‡∞®‡±Å?",
        soil: "üåæ ‡∞®‡±á‡∞≤ ‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø‡∞Ç & ‡∞é‡∞∞‡±Å‡∞µ‡±Å‡∞≤‡±Å",
        govt: "üí∞ ‡∞™‡±ç‡∞∞‡∞≠‡±Å‡∞§‡±ç‡∞µ ‡∞™‡∞•‡∞ï‡∞æ‡∞≤‡±Å & ‡∞∏‡∞¨‡±ç‡∞∏‡∞ø‡∞°‡±Ä‡∞≤‡±Å",
        weather: "üå¶ ‡∞≤‡±à‡∞µ‡±ç ‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£ ‡∞∏‡±Ç‡∞ö‡∞®"
    },
    kn: {
        dashboard: "‡≤°‡≥ç‡≤Ø‡≤æ‡≤∂‡≥ç‚Äå‡≤¨‡≥ã‡≤∞‡≥ç‡≤°‡≥ç",
        queries: "‡≤™‡≥ç‡≤∞‡≤∂‡≥ç‡≤®‡≥Ü‡≤ó‡≤≥‡≥Å",
        solutions: "‡≤™‡≤∞‡≤ø‡≤π‡≤æ‡≤∞‡≤ó‡≤≥‡≥Å",
        community: "‡≤∏‡≤Æ‡≥Å‡≤¶‡≤æ‡≤Ø",
        expert: "‡≤§‡≤ú‡≥ç‡≤û ‡≤∏‡≤Ç‡≤™‡≤∞‡≥ç‡≤ï",
        profile: "‡≤™‡≥ç‡≤∞‡≥ä‡≤´‡≥à‡≤≤‡≥ç",
        settings: "‡≤∏‡≥Ü‡≤ü‡≥ç‡≤ü‡≤ø‡≤Ç‡≤ó‡≥ç‡≤∏‡≥ç",
        chatbot: "‡≤é‡≤ê ‡≤ö‡≤æ‡≤ü‡≥ç‚Äå‡≤¨‡≤æ‡≤ü‡≥ç ‚Äî ‡≤ß‡≥ç‡≤µ‡≤®‡≤ø & ‡≤ö‡≤ø‡≤§‡≥ç‡≤∞",
        hello: "‡≤®‡≤Æ‡≤∏‡≥ç‡≤ï‡≤æ‡≤∞! ‡≤ï‡≥É‡≤∑‡≤ø‡≤Ø‡≤≤‡≥ç‡≤≤‡≤ø ‡≤π‡≥á‡≤ó‡≥Ü ‡≤∏‡≤π‡≤æ‡≤Ø ‡≤Æ‡≤æ‡≤°‡≤¨‡≤π‡≥Å‡≤¶‡≥Å?",
        soil: "üåæ ‡≤Æ‡≤£‡≥ç‡≤£‡≤ø‡≤® ‡≤Ü‡≤∞‡≥ã‡≤ó‡≥ç‡≤Ø & ‡≤∞‡≤∏‡≤ó‡≥ä‡≤¨‡≥ç‡≤¨‡≤∞",
        govt: "üí∞ ‡≤∏‡≤∞‡≥ç‡≤ï‡≤æ‡≤∞‡≤¶ ‡≤Ø‡≥ã‡≤ú‡≤®‡≥Ü‡≤ó‡≤≥‡≥Å & ‡≤∏‡≤π‡≤æ‡≤Ø‡≤ß‡≤®",
        weather: "üå¶ ‡≤®‡≥á‡≤∞ ‡≤π‡≤µ‡≤æ‡≤Æ‡≤æ‡≤® ‡≤∏‡≤≤‡≤π‡≥Ü"
    }
};

/* -------------------------
  Change language function
------------------------- */
function changeLanguage(lang) {
    const t = translations[lang];
    if (!t) return;

    // Sidebar
    document.querySelector("button[onclick*='dashboard']").innerText = t.dashboard;
    document.querySelector("button[onclick*='queries']").innerText = t.queries;
    document.querySelector("button[onclick*='solutions']").innerText = t.solutions;
    document.querySelector("button[onclick*='community']").innerText = t.community;
    document.querySelector("button[onclick*='expert']").innerText = t.expert;
    document.querySelector("button[onclick*='profileTab']").innerText = t.profile;
    document.querySelector("button[onclick*='settings']").innerText = t.settings;

    // Chatbot
    document.querySelector(".chat-header").innerText = t.chatbot;
    const firstBotMsg = document.querySelector("#chatMessages .bot-message");
    if (firstBotMsg) firstBotMsg.innerText = t.hello;

    // Cards
    document.querySelector("#dashboard h2").innerText = t.dashboard;
    document.querySelector("#dashboard h3:nth-of-type(1)").innerText = t.weather;
    document.querySelector("#dashboard h3:nth-of-type(2)").innerText = t.soil;
    document.querySelector("#dashboard h3:nth-of-type(3)").innerText = t.govt;
}
/* -------------------------
  Expense & Profit Tracker
------------------------- */
let expenses = [];
let totalIncome = 0; // you can update this from other modules if needed

function saveExpense() {
    const desc = document.getElementById('expDesc').value.trim();
    const amt = parseFloat(document.getElementById('expAmount').value);

    if (!desc || isNaN(amt)) {
        alert("Please enter valid description and amount.");
        return;
    }

    expenses.push({ desc, amt });
    document.getElementById('expDesc').value = "";
    document.getElementById('expAmount').value = "";
    renderExpenses();
}

function clearExpenses() {
    expenses = [];
    renderExpenses();
}

function renderExpenses() {
    const list = document.getElementById('expenseList');
    list.innerHTML = "";

    if (expenses.length === 0) {
        list.innerHTML = "<p class='small'>No expenses added yet.</p>";
        return;
    }

    let total = 0;
    expenses.forEach((e, i) => {
        total += e.amt;
        const div = document.createElement('div');
        div.className = "small";
        div.style.marginBottom = "6px";
        div.innerHTML = `${i + 1}. <b>${escapeHtml(e.desc)}</b> ‚Äî ‚Çπ${e.amt.toFixed(2)}`;
        list.appendChild(div);
    });

    // show total and profit
    const summary = document.createElement('div');
    summary.style.marginTop = "10px";
    summary.innerHTML = `<b>Total Expenses:</b> ‚Çπ${total.toFixed(2)} <br>
                       <b>Estimated Profit:</b> ‚Çπ${(totalIncome - total).toFixed(2)}`;
    list.appendChild(summary);
}
// --------------------
// Live Weather with Leaflet
// --------------------
let weatherMap;
let weatherMarker;

// Initialize map
function initWeatherMap(lat = 11.25, lon = 75.78) { // default: Kochi, Kerala
    if (weatherMap) return;
    weatherMap = L.map('weatherMap').setView([lat, lon], 8);

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; OpenStreetMap contributors'
    }).addTo(weatherMap);
}

// Fetch weather from Open-Meteo
async function fetchWeather(lat = 11.25, lon = 75.78) {
    initWeatherMap(lat, lon);

    const weatherCard = document.getElementById('weatherCard');
    weatherCard.innerHTML = 'Loading weather...';

    try {
        const res = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true&timezone=auto`);
        const data = await res.json();

        if (!data.current_weather) {
            weatherCard.innerText = '‚ö†Ô∏è No weather data available.';
            return;
        }

        const w = data.current_weather;

        // Weather info
        const weatherText = `
            üå° Temp: ${w.temperature}¬∞C <br>
            üí® Windspeed: ${w.windspeed} km/h <br>
            üå¶ Condition: ${w.weathercode} 
        `;
        weatherCard.innerHTML = weatherText;

        // Add/Update marker
        if (weatherMarker) {
            weatherMarker.setLatLng([lat, lon]).bindPopup(weatherText).openPopup();
        } else {
            weatherMarker = L.marker([lat, lon]).addTo(weatherMap).bindPopup(weatherText).openPopup();
        }

        weatherMap.setView([lat, lon], 8);

    } catch (err) {
        console.error(err);
        weatherCard.innerText = 'Error fetching weather.';
    }
}

// Optional: get user location
if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(pos => {
        fetchWeather(pos.coords.latitude, pos.coords.longitude);
    }, () => {
        fetchWeather(); // default location if denied
    });
} else {
    fetchWeather(); // default location
}
